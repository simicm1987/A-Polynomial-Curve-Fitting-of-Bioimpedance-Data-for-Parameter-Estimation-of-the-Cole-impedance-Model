clear all
clc

Rinf = 84.4;
R1 = 39.2;
C = 2.31e-6;
alpha = 0.747;

fprintf('SET  Rinf= %.3f\t R1= %.3f\t C= %.3e\t alpha=%.3f\t \t\n', Rinf, R1, C, alpha);

fmin = 3e3;
fmax = 1e6;
N = 256;
f=logspace(log10(fmin), log10(fmax), N);
w = 2 * pi* f;

%The Cole-impedance model
Zm=Rinf+(R1)./(1+(R1)*C*(1i*w).^alpha);
Rm = real(Zm); Xm = -imag(Zm); %noiselecc
rng(0,'twister');
a = -0.25; b = 0.25;
r = (b-a).*rand(N,1) + a;
R = Rm.*(1+0.01*r'); X = Xm.*(1+0.01*r'); %noisy


    p = polyfit(R, X, 2);
    p1 = p(1);
    p2 = p(2);
    p3 = p(3);
fprintf('Polynoimial coefficients %.2f\t %.2f\t %.2f\t\n', p1, p2, p3);

X_fitted = p1*R.^2+p2*R+p3;

X_MSE = 100*((Xm - X_fitted)./Xm);
fprintf('X_MSE Min Max Avg %.2f\t %.2f\t %.2f\t\n', min(X_MSE), mean(X_MSE), max(X_MSE));

plot(R,X,'r--o')
hold on
plot(R,X_fitted,'b--x')
grid on
legend('Refernce','Fitted')

% Calculate the discriminant
discriminant = p2^2 - 4 * p1 * p3;

% Check the discriminant and compute the roots
if discriminant > 0
    % Two distinct real roots
    Root1 = (-p2 + sqrt(discriminant)) / (2 * p1);
    Root2 = (-p2 - sqrt(discriminant)) / (2 * p1);
    fprintf('The roots are real and different: R1 = %.4f, R2 = %.4f\n', Root1, Root2);
elseif discriminant == 0
    % One real root (repeated)
    Root1 = -p2 / (2 * p1);
    fprintf('The root is real and repeated: R = %.4f\n', Root1);
else
    % Two complex roots
    realPart = -p2 / (2 * p1);
    imaginaryPart = sqrt(-discriminant) / (2 * p1);
    fprintf('The roots are complex: R1 = %.4f + %.4fi, R2 = %.4f - %.4fi\n', realPart, imaginaryPart, realPart, imaginaryPart);
end

Rinf_est = Root1;
R1_est = Root2-Root1;
Rc=-p2/(2*p1);
Xc=p1*Rc^2+p2*Rc+p3;
alpha_est=(4/pi)*atan(2*Xc/(Root2-Root1));
fprintf('Rinf = %.2f\t R1 = %.2f\t  alpha = %.3f\t \n', Rinf_est, R1_est, alpha_est);
fprintf('RE Rinf = %.2f\t R1 = %.2f\t  alpha = %.3f\t \n', 100*(Rinf_est-Rinf)/Rinf, 100*(R1_est-R1)/R1, 100*(alpha_est-alpha)/alpha);

