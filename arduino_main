//Date: 12th July 2024
//input data
#define N 256
double R[N] = {121.196408758649, 121.200785576838, 120.678236735564, 121.100830441745, 120.877242112089, 120.499498667409, 120.552872284911, 120.657749740993, 120.847076584097, 120.792012096919, 120.245116659553, 120.672812521475, 120.601569509548, 120.253452784858, 120.377151507289, 119.914722911617, 120.014662496665, 120.241507672255, 120.096367570768, 120.124180286902, 119.868348846098, 119.421999669447, 119.832016142735, 119.804424295691, 119.572071941129, 119.537900403322, 119.446244415241, 119.152534366100, 119.223320475927, 118.847274399359, 119.076138440833, 118.584245765288, 118.637172871309, 118.405762850855, 118.339820124058, 118.672112023613, 118.495798044809, 118.170437891610, 118.440870826132, 117.794342622719, 117.925453185628, 117.782234473659, 117.896802322841, 117.800569842743, 117.327405869641, 117.387761921156, 117.242175362817, 117.238005326946, 117.150913485783, 117.051242655151, 116.643418535997, 116.748639645353, 116.601638329623, 116.180207516925, 116.018108235829, 116.099373962802, 116.225403487617, 115.722672682994, 115.718389974509, 115.361231285220, 115.515083435436, 115.076124727726, 115.065391862982, 115.018768952971, 114.968767359130, 114.845402076392, 114.444719295434, 114.044377303701, 113.881545280458, 113.771928697301, 113.929926604835, 113.420461163275, 113.559656639846, 113.055531772539, 113.260198067249, 112.747653770781, 112.473812078232, 112.314914659938, 112.327976645839, 112.053648109964, 111.789252112873, 111.858428070420, 111.520595368316, 111.298028356776, 111.297294085379, 110.740150384692, 110.792430414408, 110.579590428160, 110.161053616355, 110.049871570250, 109.563544376128, 109.334087613300, 109.375703040839, 109.289948576346, 109.151122689692, 108.489276425415, 108.501892572703, 108.220757273558, 107.745137422932, 107.691085729615, 107.366114607189, 107.473444744093, 106.981149047316, 106.863151936269, 106.434425522392, 106.430785147257, 106.013852912144, 105.983620994622, 105.763757967406, 105.555801760445, 105.159709037904, 104.727667407547, 104.564170791071, 104.681730990175, 104.044294069908, 104.154390354143, 103.764424746005, 103.760927388462, 103.046169502820, 102.994484188197, 102.582235557116, 102.781993366370, 102.053038306940, 102.208564626214, 101.992297934799, 101.781222455204, 101.147323310135, 101.072115767946, 100.767458905642, 100.806427230342, 100.388876738610, 100.398094672539, 99.8036429415155, 99.6164488288296, 99.3308036246991, 99.1008458159320, 99.2402300837136, 98.8740688280543, 98.6382145391121, 98.2195548663899, 98.3498210281029, 98.0203557898926, 97.6735771206115, 97.5405780567501, 97.2759206900696, 96.9093214524853, 96.7826922359378, 96.5220841817544, 96.3492499135364, 96.1761822732369, 96.0633834276599, 95.6910625938138, 95.9057934046980, 95.7337409076838, 95.3274076116526, 95.1393392400728, 94.8823447753154, 94.9661867862501, 94.5342615053751, 94.2343519821073, 94.3740576750310, 94.0165564534697, 93.7758840588343, 93.6831926002709, 93.3728393044292, 93.2254877754965, 93.4414877627893, 93.2880825483241, 92.9534690716791, 92.5593889627806, 92.4881196580969, 92.3927149352184, 92.4608208405836, 91.9435106469605, 91.8131055011647, 91.7301035616387, 91.8116330191813, 91.7126643986103, 91.5396206304208, 91.3173603156179, 91.2311266413384, 90.9890166984889, 91.0672929256692, 90.6911163260411, 90.7955751894301, 90.4480784219011, 90.4145815972068, 90.4155167807467, 90.3719214101239, 89.9454137959114, 90.2181560252613, 90.0414802826229, 89.8061657070767, 89.6798055838527, 89.5830918476695, 89.4204829680300, 89.4129961003738, 89.3178509392153, 89.3603598007780, 89.2574349399257, 89.0994048637220, 88.8919828205971, 88.9968890007478, 88.7871643604002, 88.6221636080867, 88.8002102932971, 88.6910575905770, 88.4673219360147, 88.4212634710518, 88.3290817802997, 88.0867259911337, 88.0544685443427, 88.0571075480339, 87.8805761923631, 88.0811584938058, 87.7276643061588, 87.6747434096816, 87.5852163171093, 87.5461694389664, 87.5745151366553, 87.4583700101588, 87.6658213670178, 87.3908974939893, 87.2256636504889, 87.4831659642246, 87.4599183800525, 87.1692811669770, 86.9728795434875, 86.9844159570873, 86.9985289534663, 87.0290340020774, 86.8349024076314, 86.9344345679596, 86.9339159682639, 86.6748400102077, 86.5839672404125, 86.6169884208709, 86.5827208657217, 86.5853839876157, 86.5794630608795, 86.3553959819860, 86.3915034688418, 86.5846373167780, 86.2121844326782, 86.5626669818243, 86.4394923893177, 86.2984917479160, 86.3013522223766, 86.1189934109837, 86.1800125095998, 86.3634197768388, 86.1509016868006, 86.1073307518007, 85.9508573677049, 86.0303422601742, 86.0578397853567};
double X[N] = { -4.53314969821665, -4.60256972736699, -4.65257089008094, -4.73984808527895, -4.80284908126932, -4.86026832645049, -4.93578642432807, -5.01441936117316, -5.09765817320540, -5.17158960883253, -5.22500067459890, -5.32160729784478, -5.39736615156411, -5.46138353813788, -5.54760670554109, -5.60751539229509, -5.69440194747776, -5.78846136671416, -5.86559622976637, -5.95202189415158, -6.02515448339722, -6.08912556542106, -6.19765333031936, -6.28474308987888, -6.36180940606706, -6.45012662117703, -6.53614742684483, -6.61171095169530, -6.70821589223663, -6.78021997167453, -6.88749053976199, -6.95372368447906, -7.05240572940568, -7.13488151757337, -7.22791530476603, -7.34631048369054, -7.43415602998675, -7.51302356547485, -7.63050282615979, -7.68934820798290, -7.79926064716480, -7.89174577944739, -8.00218778491787, -8.09902750821361, -8.17011978321630, -8.27864559330286, -8.37319524434839, -8.47831094791717, -8.57792344861199, -8.67699566106478, -8.75328450779989, -8.86829147491950, -8.96456562294940, -9.03965013566157, -9.13477370966490, -9.24935270386993, -9.36802675373511, -9.43596866819298, -9.54434198101485, -9.62349623338792, -9.74527508032551, -9.81692022920083, -9.92477780609212, -10.0295493730809, -10.1339553988910, -10.2317066506641, -10.3041860715206, -10.3758229493469, -10.4683731430613, -10.5653457071957, -10.6869526252630, -10.7453067814381, -10.8644021595071, -10.9211928479740, -11.0457027136648, -11.0994569610042, -11.1754072554063, -11.2617471137243, -11.3645036082078, -11.4371985370638, -11.5096176208234, -11.6153402055208, -11.6776379621474, -11.7505330466008, -11.8456113321539, -11.8798924653364, -11.9779616857836, -12.0460121056687, -12.0898554646448, -12.1656598437651, -12.1981192238070, -12.2571588458065, -12.3449253882214, -12.4167054083077, -12.4806523674751, -12.4825244791644, -12.5597881861411, -12.6010597073750, -12.6173183759515, -12.6806842631055, -12.7099456830833, -12.7882301343633, -12.7928697748894, -12.8397962967958, -12.8469214828759, -12.9029129768018, -12.9063324379623, -12.9543110348706, -12.9766577435784, -12.9978957653159, -12.9932963014752, -12.9814741958509, -13.0002362984945, -13.0514191455516, -13.0057660812174, -13.0508275186666, -13.0305689769181, -13.0561306515719, -12.9894055153828, -13.0034606593737, -12.9692616055264, -13.0097392194361, -12.9299290817146, -12.9594385882313, -12.9391249560682, -12.9167627158498, -12.8380395569570, -12.8275511937752, -12.7852901920351, -12.7839842982549, -12.7221711502553, -12.7118498366549, -12.6225605374707, -12.5823050732450, -12.5271328116589, -12.4765462401077, -12.4699589795411, -12.3974151296564, -12.3389143820445, -12.2553180867276, -12.2379113785225, -12.1610120583409, -12.0798982081721, -12.0231344214432, -11.9480723875074, -11.8585768707600, -11.7965269066746, -11.7162343358967, -11.6447615042360, -11.5714366029687, -11.5035608699024, -11.4029774275943, -11.3705806089382, -11.2904912153574, -11.1813790563140, -11.0965497159117, -11.0023297774159, -10.9461542277482, -10.8292342333134, -10.7264767674691, -10.6724460048451, -10.5609770727803, -10.4617676243264, -10.3780617070931, -10.2693540406521, -10.1777873277422, -10.1247329229664, -10.0305543386660, -9.91630697727676, -9.79539454696886, -9.70815842371796, -9.61770156879759, -9.54350819779561, -9.40855798597080, -9.31309739135356, -9.22200832610087, -9.14688127982952, -9.05325515221903, -8.95208019389272, -8.84601693718346, -8.75302244439913, -8.64502897808044, -8.56732302711078, -8.44687979671996, -8.37123584482399, -8.25397018311509, -8.16557677731510, -8.08022072170956, -7.99085968181108, -7.86805612201812, -7.80657147081854, -7.70614799033288, -7.60116870091006, -7.50585821525978, -7.41337576050609, -7.31585059455400, -7.23137169691340, -7.14012269247526, -7.06017740577895, -6.96907423818404, -6.87421196439739, -6.77620175325695, -6.70244266907697, -6.60545403969411, -6.51252531686576, -6.44520519414787, -6.35740764416983, -6.26214422275598, -6.18016443971057, -6.09556553251237, -6.00139540699369, -5.92229208543082, -5.84608733536693, -5.75867656063574, -5.69650904491010, -5.59920042421828, -5.52199390430017, -5.44318501354828, -5.36821366988546, -5.29798602009299, -5.21969950753008, -5.16127121520499, -5.07512301079560, -4.99632802590096, -4.94231317623632, -4.87289767527742, -4.78947601249939, -4.71225806123671, -4.64710205142502, -4.58272248242365, -4.51983449566875, -4.44606400161829, -4.38806452981975, -4.32561051958931, -4.25114459949182, -4.18584427283693, -4.12724215104372, -4.06610259953868, -4.00738700287045, -3.94894374970760, -3.88137018374535, -3.82627956318781, -3.77865747621075, -3.70712870452189, -3.66736093795810, -3.60803953357773, -3.54879354204923, -3.49620042193151, -3.43686077941180, -3.38795192626399, -3.34435177580658, -3.28607482356993, -3.23502488116664, -3.18047712270764, -3.13533005991591, -3.08885052755874};
//variables
// Arrays to store A matrix and other intermediate results
double A[N][3];
double At[3][N]; // Transpose of A
double AtA[3][3];
double AtX[3];
double beta[3];

unsigned long duration_alg = 0;

// Function to transpose a matrix
void transpose(double matrix[N][3], double result[3][N]) {
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < 3; j++) {
      result[j][i] = matrix[i][j];
    }
  }
}

// Function to multiply two matrices
void multiplyMatrices(double mat1[3][N], double mat2[N][3], double result[3][3]) {
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      result[i][j] = 0;
      for (int k = 0; k < N; k++) {
        result[i][j] += mat1[i][k] * mat2[k][j];
      }
    }
  }
}

// Function to multiply a matrix and a vector
void multiplyMatrixVector(double mat[3][N], double vec[N], double result[3]) {
  for (int i = 0; i < 3; i++) {
    result[i] = 0;
    for (int j = 0; j < N; j++) {
      result[i] += mat[i][j] * vec[j];
    }
  }
}

// Function to solve a system of linear equations using Gaussian elimination
void gaussianElimination(double matrix[3][3], double result[3]) {
  int i, j, k;
  double factor;

  // Forward elimination
  for (i = 0; i < 3; i++) {
    for (j = i + 1; j < 3; j++) {
      factor = matrix[j][i] / matrix[i][i];
      for (k = 0; k < 3; k++) {
        matrix[j][k] -= factor * matrix[i][k];
      }
      result[j] -= factor * result[i];
    }
  }

  // Back substitution
  for (i = 2; i >= 0; i--) {
    result[i] /= matrix[i][i];
    for (j = 0; j < i; j++) {
      result[j] -= matrix[j][i] * result[i];
    }
  }
}

void setup()
{
  Serial.begin(115200);
  delay(3000);


  Serial.println("*******START*******");
  duration_alg = micros();

  // Construct matrix A
  for (int i = 0; i < N; i++) {
    A[i][0] = R[i] * R[i];
    A[i][1] = R[i];
    A[i][2] = 1;
    X[i] = -1.0*X[i];
  }

  // Transpose matrix A
  transpose(A, At);

  // Calculate At * A
  multiplyMatrices(At, A, AtA);

  // Calculate At * X'
  multiplyMatrixVector(At, X, AtX);

  // Solve the system of linear equations to find beta
  for (int i = 0; i < 3; i++) {
    beta[i] = AtX[i];
  }
  gaussianElimination(AtA, beta);

  // Extract coefficients
  double p1 = beta[0];
  double p2 = beta[1];
  double p3 = beta[2];

  // Print the coefficients
  Serial.print("p1: ");
  Serial.println(p1);
  Serial.print("p2: ");
  Serial.println(p2);
  Serial.print("p3: ");
  Serial.println(p3);

  double discriminant = p2*p2 - 4 * p1 * p3;
  double Rinf = (-p2 + sqrt(discriminant)) / (2 * p1);
  double R1 = (-p2 - sqrt(discriminant)) / (2 * p1) - Rinf;

  double Rc=-p2/(2*p1);
  double Xc=p1*Rc*Rc+p2*Rc+p3;
  double alpha_est=(4/3.14)*atan(2*Xc/R1);


  Serial.println("*******Estimated values:*******");

  Serial.print("Rs= ");
  Serial.println(Rinf);

  Serial.print("Rp= ");
  Serial.println(R1);

  Serial.print("alpha= ");
  alpha_est=alpha_est;
  Serial.println(alpha_est);
  Serial.println("*******END*******");
    duration_alg = micros() - duration_alg;
  Serial.print("Execution time: ");
  Serial.print(duration_alg*1e-3);
  Serial.println(" ms");
}

void loop() {
  }
